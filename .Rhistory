#' @param id module id
#' @param pkg_ds_input package and dataset inputs
#'
#' @return shiny server module
#' @export mod_get_dataset_server
#'
#' @importFrom shiny NS moduleServer reactive req
#' @importFrom shiny bindCache bindEvent
mod_get_dataset_server <- function(id) {
shiny::moduleServer(id, function(input, output, session) {
pkg_select <- mod_select_pkg_server(id = "pkg")
pkg_data <- mod_select_data_server("data",
pkg_input = pkg_select)
pkg_data
})
}
#' Tree App
#'
#' @importFrom lobstr tree
#' @importFrom shiny fluidPage sidebarLayout
#' @importFrom shiny sidebarPanel shinyApp
#' @importFrom shiny mainPanel verbatimTextOutput renderPrint
treeApp <- function() {
require(palmerpenguins)
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
mod_get_dataset_ui("data")
),
shiny::mainPanel(
shiny::h3(shiny::code("treeApp")),
shiny::verbatimTextOutput("out"),
shiny::verbatimTextOutput("vals")
)
server <- function(input, output, session) {
dataset <- mod_get_dataset_server("data")
output$out <- shiny::renderPrint(
dataset(),
width = 80)
output$vals <- shiny::renderPrint({
vals <- reactiveValuesToList(input, TRUE)
lobstr::tree(vals)
})
}
shiny::shinyApp(ui, server)
}
treeApp()
#' Package dataset UI
#'
#' @param id module id
#'
#' @return shiny UI module
#' @export mod_select_pkg_ui
#'
#' @importFrom shiny NS tagList code selectInput
mod_select_pkg_ui <- function(id) {
require(palmerpenguins)
require(dplyr)
df_pkgs <- get_pkgs_with_dfs()
ns <- shiny::NS(id)
shiny::tagList(
shiny::code("select pkg"),
shiny::selectInput(ns("pkg"),
label = "Select a package",
choices = df_pkgs)
)
}
#' Select package Server Module
#'
#' @param id
#'
#' @return
#' @export mod_select_pkg_server
#'
#' @importFrom shiny NS moduleServer reactive req
mod_select_pkg_server <- function(id) {
shiny::moduleServer(id, function(input, output, session) {
shiny::reactive({
shiny::req(c(input$pkg))
input$pkg
})
}
#' Package dataset UI
#'
#' @param id module id
#'
#' @return shiny UI module
#' @export mod_select_data_ui
#'
#' @importFrom shiny NS tagList textInput
mod_select_data_ui <- function(id) {
require(palmerpenguins)
require(dplyr)
ns <- shiny::NS(id)
shiny::tagList(
shiny::code("select data"),
shiny::selectInput(
ns("data"),
label = "Select data",
choices = NULL),
shiny::code("select data"),
shiny::verbatimTextOutput(ns("data"))
)
}
#' Package dataset server
#'
#' @param id module id
#' @param pkg_input selected package
#'
#' @return shiny server module
#' @export mod_select_data_server
#'
#' @importFrom shiny NS moduleServer reactive req
#' @importFrom lobstr tree
mod_select_data_server <- function(id, pkg_input) {
shiny::moduleServer(id, function(input, output, session) {
output$data <- shiny::renderPrint({
vals <- reactiveValuesToList(input, TRUE)
lobstr::tree(vals)
})
shiny::observe({
pkg_data_nms <- get_pkg_df_names(pkg = pkg_input())
shiny::updateSelectInput(session,
inputId = "data",
choices = pkg_data_nms)
}) |>
shiny::bindEvent(pkg_input(),
ignoreNULL = TRUE)
shiny::reactive({
shiny::req(input$data,  pkg_input())
get(x = input$data,
pos = paste0("package:", pkg_input()))
}) |>
shiny::bindCache(c(pkg_input(), input$data)) |>
shiny::bindEvent(pkg_input())
})
}
#' Get data UI module
#'
#' @param id module id
#'
#' @return shiny UI module
#' @export mod_get_dataset_ui
#'
#' @importFrom shiny NS tagList
mod_get_dataset_ui <- function(id) {
ns <- shiny::NS(id)
shiny::tagList(
shiny::code("get_dataset"),
mod_select_pkg_ui(id = ns("pkg")),
mod_select_data_ui(id = ns("data"))
)
}
#' Get data server module
#'
#' @param id module id
#' @param pkg_ds_input package and dataset inputs
#'
#' @return shiny server module
#' @export mod_get_dataset_server
#'
#' @importFrom shiny NS moduleServer reactive req
#' @importFrom shiny bindCache bindEvent
mod_get_dataset_server <- function(id) {
shiny::moduleServer(id, function(input, output, session) {
pkg_select <- mod_select_pkg_server(id = "pkg")
pkg_data <- mod_select_data_server("data",
pkg_input = pkg_select)
pkg_data
})
}
#' Tree App
#'
#' @importFrom lobstr tree
#' @importFrom shiny fluidPage sidebarLayout
#' @importFrom shiny sidebarPanel shinyApp
#' @importFrom shiny mainPanel verbatimTextOutput renderPrint
treeApp <- function() {
require(palmerpenguins)
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
mod_get_dataset_ui("data")
),
shiny::mainPanel(
shiny::h3(shiny::code("treeApp")),
shiny::verbatimTextOutput("out"),
shiny::verbatimTextOutput("vals")
)
server <- function(input, output, session) {
dataset <- mod_get_dataset_server("data")
output$out <- shiny::renderPrint(
dataset(),
width = 80)
output$vals <- shiny::renderPrint({
vals <- reactiveValuesToList(input, TRUE)
lobstr::tree(vals)
})
}
shiny::shinyApp(ui, server)
}
treeApp()
#' Package dataset UI
#'
#' @param id module id
#'
#' @return shiny UI module
#' @export mod_select_pkg_ui
#'
#' @importFrom shiny NS tagList code selectInput
mod_select_pkg_ui <- function(id) {
require(palmerpenguins)
require(dplyr)
df_pkgs <- get_pkgs_with_dfs()
ns <- shiny::NS(id)
shiny::tagList(
shiny::code("select pkg"),
shiny::selectInput(ns("pkg"),
label = "Select a package",
choices = df_pkgs)
)
}
#' Select package Server Module
#'
#' @param id
#'
#' @return
#' @export mod_select_pkg_server
#'
#' @importFrom shiny NS moduleServer reactive req
mod_select_pkg_server <- function(id) {
shiny::moduleServer(id, function(input, output, session) {
shiny::reactive({
shiny::req(c(input$pkg))
input$pkg
})
}
#' Package dataset UI
#'
#' @param id module id
#'
#' @return shiny UI module
#' @export mod_select_data_ui
#'
#' @importFrom shiny NS tagList textInput
mod_select_data_ui <- function(id) {
require(palmerpenguins)
require(dplyr)
ns <- shiny::NS(id)
shiny::tagList(
shiny::code("select data"),
shiny::selectInput(
ns("data"),
label = "Select data",
choices = NULL),
shiny::code("select data"),
shiny::verbatimTextOutput(ns("data"))
)
}
#' Package dataset server
#'
#' @param id module id
#' @param pkg_input selected package
#'
#' @return shiny server module
#' @export mod_select_data_server
#'
#' @importFrom shiny NS moduleServer reactive req
#' @importFrom lobstr tree
mod_select_data_server <- function(id, pkg_input) {
shiny::moduleServer(id, function(input, output, session) {
output$data <- shiny::renderPrint({
vals <- reactiveValuesToList(input, TRUE)
lobstr::tree(vals)
})
shiny::observe({
pkg_data_nms <- get_pkg_df_names(pkg = pkg_input())
shiny::updateSelectInput(session,
inputId = "data",
choices = pkg_data_nms)
}) |>
shiny::bindEvent(pkg_input(), ignoreNULL = TRUE)
shiny::reactive({
shiny::req(input$data,  pkg_input())
get(x = input$data,
pos = paste0("package:", pkg_input()))
}) |>
shiny::bindCache(c(pkg_input(), input$data)) |>
shiny::bindEvent(pkg_input(), ignoreNULL = TRUE)
})
}
#' Get data UI module
#'
#' @param id module id
#'
#' @return shiny UI module
#' @export mod_get_dataset_ui
#'
#' @importFrom shiny NS tagList
mod_get_dataset_ui <- function(id) {
ns <- shiny::NS(id)
shiny::tagList(
shiny::code("get_dataset"),
mod_select_pkg_ui(id = ns("pkg")),
mod_select_data_ui(id = ns("data"))
)
}
#' Get data server module
#'
#' @param id module id
#' @param pkg_ds_input package and dataset inputs
#'
#' @return shiny server module
#' @export mod_get_dataset_server
#'
#' @importFrom shiny NS moduleServer reactive req
#' @importFrom shiny bindCache bindEvent
mod_get_dataset_server <- function(id) {
shiny::moduleServer(id, function(input, output, session) {
pkg_select <- mod_select_pkg_server(id = "pkg")
pkg_data <- mod_select_data_server("data",
pkg_input = pkg_select)
pkg_data
})
}
#' Tree App
#'
#' @importFrom lobstr tree
#' @importFrom shiny fluidPage sidebarLayout
#' @importFrom shiny sidebarPanel shinyApp
#' @importFrom shiny mainPanel verbatimTextOutput renderPrint
treeApp <- function() {
require(palmerpenguins)
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
mod_get_dataset_ui("data")
),
shiny::mainPanel(
shiny::h3(shiny::code("treeApp")),
shiny::verbatimTextOutput("out"),
shiny::verbatimTextOutput("vals")
)
server <- function(input, output, session) {
dataset <- mod_get_dataset_server("data")
output$out <- shiny::renderPrint(
dataset(),
width = 80)
output$vals <- shiny::renderPrint({
vals <- reactiveValuesToList(input, TRUE)
lobstr::tree(vals)
})
}
shiny::shinyApp(ui, server)
}
treeApp()
#' Package dataset UI
#'
#' @param id module id
#'
#' @return shiny UI module
#' @export mod_select_pkg_ui
#'
#' @importFrom shiny NS tagList code selectInput
mod_select_pkg_ui <- function(id) {
require(palmerpenguins)
require(dplyr)
df_pkgs <- get_pkgs_with_dfs()
ns <- shiny::NS(id)
shiny::tagList(
shiny::code("select pkg"),
shiny::selectInput(ns("pkg"),
label = "Select a package",
choices = df_pkgs)
)
}
#' Select package Server Module
#'
#' @param id
#'
#' @return
#' @export mod_select_pkg_server
#'
#' @importFrom shiny NS moduleServer reactive req
mod_select_pkg_server <- function(id) {
shiny::moduleServer(id, function(input, output, session) {
shiny::reactive({
shiny::req(c(input$pkg))
input$pkg
})
}
#' Package dataset UI
#'
#' @param id module id
#'
#' @return shiny UI module
#' @export mod_select_data_ui
#'
#' @importFrom shiny NS tagList textInput
mod_select_data_ui <- function(id) {
require(palmerpenguins)
require(dplyr)
ns <- shiny::NS(id)
shiny::tagList(
shiny::code("select data"),
shiny::selectInput(
ns("data"),
label = "Select data",
choices = NULL),
shiny::code("select data"),
shiny::verbatimTextOutput(ns("data"))
)
}
#' Package dataset server
#'
#' @param id module id
#' @param pkg_input selected package
#'
#' @return shiny server module
#' @export mod_select_data_server
#'
#' @importFrom shiny NS moduleServer reactive req
#' @importFrom lobstr tree
mod_select_data_server <- function(id, pkg_input) {
shiny::moduleServer(id, function(input, output, session) {
output$data <- shiny::renderPrint({
vals <- reactiveValuesToList(input, TRUE)
lobstr::tree(vals)
})
shiny::observe({
shiny::req(pkg_input())
pkg_data_nms <- get_pkg_df_names(pkg = pkg_input())
shiny::updateSelectInput(session,
inputId = "data",
choices = pkg_data_nms)
}) |>
shiny::bindEvent(pkg_input(),
ignoreNULL = TRUE)
shiny::reactive({
shiny::req(input$data,  pkg_input())
get(x = input$data,
pos = paste0("package:", pkg_input()))
}) |>
shiny::bindCache(c(pkg_input(), input$data)) |>
shiny::bindEvent(pkg_input(), ignoreNULL = TRUE)
})
}
#' Get data UI module
#'
#' @param id module id
#'
#' @return shiny UI module
#' @export mod_get_dataset_ui
#'
#' @importFrom shiny NS tagList
mod_get_dataset_ui <- function(id) {
ns <- shiny::NS(id)
shiny::tagList(
shiny::code("get_dataset"),
mod_select_pkg_ui(id = ns("pkg")),
mod_select_data_ui(id = ns("data"))
)
}
#' Get data server module
#'
#' @param id module id
#' @param pkg_ds_input package and dataset inputs
#'
#' @return shiny server module
#' @export mod_get_dataset_server
#'
#' @importFrom shiny NS moduleServer reactive req
#' @importFrom shiny bindCache bindEvent
mod_get_dataset_server <- function(id) {
shiny::moduleServer(id, function(input, output, session) {
pkg_select <- mod_select_pkg_server(id = "pkg")
pkg_data <- mod_select_data_server("data",
pkg_input = pkg_select)
pkg_data
})
}
#' Tree App
#'
#' @importFrom lobstr tree
#' @importFrom shiny fluidPage sidebarLayout
#' @importFrom shiny sidebarPanel shinyApp
#' @importFrom shiny mainPanel verbatimTextOutput renderPrint
treeApp <- function() {
require(palmerpenguins)
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
mod_get_dataset_ui("data")
),
shiny::mainPanel(
shiny::h3(shiny::code("treeApp")),
shiny::verbatimTextOutput("out"),
shiny::verbatimTextOutput("vals")
)
server <- function(input, output, session) {
dataset <- mod_get_dataset_server("data")
output$out <- shiny::renderPrint(
dataset(),
width = 80)
output$vals <- shiny::renderPrint({
vals <- reactiveValuesToList(input, TRUE)
lobstr::tree(vals)
})
}
shiny::shinyApp(ui, server)
}
treeApp()
