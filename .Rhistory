})
}
shiny::shinyApp(ui, server)
}
treeApp()
#' Package dataset UI
#'
#' @param id module id
#'
#' @return shiny UI module
#' @export mod_pkg_data_ui
#'
#' @importFrom shiny NS tagList code selectInput
mod_pkg_data_ui <- function(id) {
require(palmerpenguins)
require(dplyr)
df_pkgs <- get_pkgs_with_dfs()
ns <- shiny::NS(id)
shiny::tagList(
shiny::code("pkg data"),
shiny::selectInput(ns("pkg"),
label = "Select a package",
choices = df_pkgs),
shiny::selectInput(ns("data"),
label = "Select data",
choices = NULL)
)
}
#' Select package Server Module
#'
#' @param id
#'
#' @return
#' @export mod_pkg_data_server
#'
#' @importFrom shiny NS moduleServer reactive req
mod_pkg_data_server <- function(id) {
shiny::moduleServer(id, function(input, output, session) {
shiny::observe({
pkg_data_nms <- get_pkg_df_names(pkg = input$pkg)
shiny::updateSelectInput(session,
inputId = "data",
choices = pkg_data_nms)
}) |>
shiny::bindEvent(input$pkg,
ignoreNULL = TRUE)
shiny::reactive({
shiny::req(input$data, input$pkg)
get(x = input$data,
pos = paste0("package:", input$pkg))
}) |>
shiny::bindCache(c(input$pkg, input$data)) |>
shiny::bindEvent(input$data,
ignoreNULL = TRUE)
})
}
#' Get data UI module
#'
#' @param id module id
#'
#' @return shiny UI module
#' @export mod_select_vars_ui
#'
#' @importFrom shiny NS tagList
mod_select_vars_ui <- function(id) {
ns <- shiny::NS(id)
shiny::tagList(
shiny::code("select vars"),
shiny::selectInput(
ns("fun"),
label = "Filter by",
choices = c("is.numeric",
"is.character",
"is.factor",
"is.logical",
"is.list"),
selected = "is.numeric"),
shiny::selectizeInput(
ns("vars"),
label = "Select variables",
choices = NULL,
multiple = TRUE),
# shiny::verbatimTextOutput(ns("pkg_ds"))
)
}
#' Filter variables by function
#'
#' @param data `data.frame`/`tibble`
#' @param filter any `is.[type]` function (i.e., `is.numeric`,
#' `is.character`, `is.logical`, etc.)
#'
#' @return data.frame/tibble filtered by function
#' @export filter_vars_fun
#'
#' @importFrom rlang as_function
#'
filter_vars_fun <- function(data, filter) {
fun <- rlang::as_function(filter)
stopifnot(is.data.frame(data))
stopifnot(is.function(fun))
names(data)[vapply(data, fun, logical(1))]
}
#' Select variable server module
#'
#' @param id module id
#'
#' @return shiny server module
#' @export mod_select_vars_server
#'
#' @importFrom shiny NS moduleServer reactive req
#' @importFrom shiny bindCache bindEvent
mod_select_vars_server <- function(id, pkg_data) {
shiny::moduleServer(id, function(input, output, session) {
shiny::observe({
filtered <- filter_vars_fun(
data = pkg_data(),
filter =  input$fun)
shiny::updateSelectizeInput(session,
inputId = "vars",
choices = filtered,
selected = filtered)
}) |>
shiny::bindEvent(c(pkg_data(), input$fun),
ignoreNULL = TRUE)
shiny::reactive({
shiny::req(input$vars, input$fun)
pkg_data()[input$vars]
}) |>
shiny::bindEvent(input$vars, input$fun)
})
}
#' Custom `skimr::skim()` for numeric variables
#'
#' @description
#' The custom `skimr::skim_with()`
#'
#' @export df_skim
#'
#' @importFrom skimr skim_with skim
#' @examples
#' num_skim(mtcars)
df_skim <- function(df) {
skims <- list(numeric =
sfl(min = ~ min(., na.rm = TRUE),
med = ~ median(., na.rm = TRUE),
p0 = NULL, p25 = NULL, p50 = NULL,
p75 = NULL, p100 = NULL,
max = ~ max(., na.rm = TRUE),
iqr = ~ IQR(., na.rm = TRUE)),
factor =
sfl(ordered = NULL),
character =
sfl(min = NULL, max = NULL, whitespace = NULL)
)
df_skim <- skimr::skim_with(!!!skims)
df_skim(df)
}
#' Tree App
#'
#' @importFrom lobstr tree
#' @importFrom shiny fluidPage sidebarLayout
#' @importFrom shiny sidebarPanel shinyApp
#' @importFrom shiny mainPanel verbatimTextOutput renderPrint
treeApp <- function() {
require(palmerpenguins)
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
width = 2,
mod_pkg_data_ui("data")
),
shiny::mainPanel(width = 10,
shiny::h3(shiny::code("treeApp")),
mod_select_vars_ui("vars"),
shiny::verbatimTextOutput("skim"),
shiny::verbatimTextOutput("vals")
)
server <- function(input, output, session) {
pkg_ds <- mod_pkg_data_server("data")
filtered <- mod_select_vars_server("vars", pkg_data = pkg_ds)
output$skim <- shiny::renderPrint({
df_skim(df = filtered())
# str(filtered())
})
output$vals <- shiny::renderPrint({
vals <- shiny::reactiveValuesToList(input, TRUE)
lobstr::tree(vals)
})
}
shiny::shinyApp(ui, server)
}
treeApp()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(dbap)
skimApp()
devtools::load_all()
devtools::document()
library(dbap)
devtools::load_all()
devtools::document()
library(dbap)
skimApp()
dplyr::starwars
devtools::load_all()
devtools::document()
library(dbap)
devtools::load_all()
devtools::document()
library(dbap)
skimApp()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(dbap)
devtools::load_all()
devtools::document()
library(dbap)
skimApp()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dbap)
library(dplyr)
library(Lahman)
library(NHANES)
library(palmerpenguins)
# get packages with data.frames/tibbles
pkgs <- get_pkgs_with_dfs()
# select arbitrary package with data.frames/tibbles
pkg <- pkgs[1]
pkg
# get packages with data.frames/tibbles
pkgs <- get_pkgs_with_dfs()
# select arbitrary package with data.frames/tibbles
pkg <- pkgs[2]
pkg
# get packages with data.frames/tibbles
pkgs <- get_pkgs_with_dfs()
# select arbitrary package with data.frames/tibbles
pkg <- pkgs[3]
pkg
# get packages with data.frames/tibbles
pkgs <- get_pkgs_with_dfs()
# select arbitrary package with data.frames/tibbles
pkg <- pkgs[3]
pkg
get_pkg_df_names(pkg = pkg)
get_pkg_df_names(pkg = pkg)[3]
get_pkg_df_names(pkg = pkg)[4]
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dbap)
library(dplyr)
library(Lahman)
library(NHANES)
library(palmerpenguins)
# get packages with data.frames/tibbles
pkgs <- get_pkgs_with_dfs()
# select arbitrary package with data.frames/tibbles
pkg <- pkgs[3]
pkg
get_pkg_df_names(pkg = pkg)
filter_vars_fun(
data = pkg_data,
filter = "is.numeric")
pkg_ds <- get_pkg_df_names(pkg = pkg)[4]
pkg_data <- base::get(x = pkg_ds,
pos = paste0("package:", pkg))
dplyr::glimpse(pkg_data)
filter_vars_fun(
data = pkg_data,
filter = "is.numeric")
filtererd <- filter_vars_fun(
data = pkg_data,
filter = "is.numeric")
filtererd
pkg_data[filtererd]
devtools::load_all()
devtools::document()
library(dbap)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dbap)
library(dplyr)
library(Lahman)
library(NHANES)
library(palmerpenguins)
# get packages with data.frames/tibbles
pkgs <- get_pkgs_with_dfs()
# select arbitrary package with data.frames/tibbles
pkg <- pkgs[1]
pkg
get_pkg_df_names(pkg = pkg)
pkg_ds <- get_pkg_df_names(pkg = pkg)[1]
pkg_data <- base::get(x = pkg_ds,
pos = paste0("package:", pkg))
dplyr::glimpse(pkg_data)
filtererd <- pull_type_cols(
data = pkg_data,
filter = "is.numeric")
filtererd
# get packages with data.frames/tibbles
pkgs <- get_pkgs_with_dfs()
# select package with data.frames/tibbles
pkg <- pkgs['dplyr']
pkg
pkg_ds <- get_pkg_df_names(pkg = pkg)['starwars']
pkg_data <- base::get(x = pkg_ds,
pos = paste0("package:", pkg))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dbap)
library(dplyr)
library(Lahman)
library(NHANES)
library(palmerpenguins)
# get packages with data.frames/tibbles
pkgs <- get_pkgs_with_dfs()
# select package with data.frames/tibbles
pkg <- pkgs['dplyr']
pkg
get_pkg_df_names(pkg = pkg)
pkg_ds <- get_pkg_df_names(pkg = pkg)['starwars']
pkg_data <- base::get(x = pkg_ds,
pos = paste0("package:", pkg))
pkg_ds <- get_pkg_df_names(pkg = pkg)
pkg_ds
pkg_ds['starwars']
pkg_ds <- get_pkg_df_names(pkg = pkg)[4]
pkg_data <- base::get(x = pkg_ds,
pos = paste0("package:", pkg))
dplyr::glimpse(pkg_data)
filtererd <- pull_type_cols(
data = pkg_data,
filter = "is.numeric")
filtererd
pkg_data[filtererd]
devtools::load_all()
devtools::document()
library(dbap)
devtools::load_all()
devtools::document()
library(dbap)
devtools::load_all()
devtools::document()
library(dbap)
devtools::load_all()
devtools::document()
library(dbap)
devtools::load_all()
devtools::document()
library(dbap)
devtools::load_all()
devtools::document()
library(dbap)
get_default_skimmers()
devtools::load_all()
devtools::document()
library(dbap)
??df_skim
devtools::load_all()
devtools::document()
library(dbap)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
filtererd <- pull_type_cols(
data = pkg_data,
filter = "is.list")
filtererd
filtererd[1:2]
pkg_data[filtererd[1:2]]
df_skim(pkg_data[filtererd[1:2]])
skimApp()
devtools::load_all()
devtools::document()
library(dbap)
skimApp()
devtools::load_all()
devtools::document()
library(dbap)
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
package
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ls()
package
loadedNamespaces("fs")
isNamespaceLoaded("fs")
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ls()
package
isNamespaceLoaded("fs")
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ds
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ds
ds[c('Package', 'Item','class','dim','Title')]
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ls()
ds
dsitems
ds$dim <- unlist(lapply(seq_len(nrow(ds)), getDim ))
ds
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ds
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ds
dsitems
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
library(lubridate)
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
dsitems
ds
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
getData("lakers", "lubridate")
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
getDim(ds)
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ds
dsitems[,wanted]
as.data.frame(dsitems[,wanted], stringsAsFactors = FALSE)
data("fs")
data(fs)
data(package = "fs")
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
data(package = "lubridate")
get(x = "lakers", pos = "package:lubridate")
get(x = "lakers", pos = "package:lubridate") |> head()
get(x = "lakers", pos = "package:lubridate") |> str()
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ds
dsitems
wanted
dput(dsitems)
data(package = "lubridate")$results
data.frame(Package = 'lubridate',
Item = 'lakers',
Title = 'Lakers 2008-2009 basketball data set')
dsitems[,wanted]
data.frame(dsitems[,wanted])
as.matrix(dsitems[,wanted])
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ds
datasets("forcats", incPackage = TRUE)
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
str(data(package = package))
str(data(package = "dplyr"))
data(package = "dplyr")$results
dsitems <- data(package = "forcats")$results
dsitems[,wanted]
wanted <- c('Package', 'Item','Title')
dsitems[,wanted]
purrr::map(dsitems[,wanted], tibble::as_tibble)
as.list(dsitems[,wanted])
purrr::map(dsitems[,wanted], tibble::add_case)
purrr::map(dsitems[,wanted], as.data.frame)
purrr::map(dsitems[,wanted], as.data.frame) |> purrr::list_rbind()
purrr::map(dsitems[,wanted], as.data.frame) |> purrr::list_cbind()
purrr::map(dsitems[,wanted], as.data.frame) |> purrr::list_cbind() |> purrr::set_names(nm = wanted)
purrr::map(dsitems[,wanted], as.data.frame) |> purrr::list_cbind() |> colnames(nm = wanted)
purrr::map(dsitems[,wanted], as.data.frame) |> purrr::list_cbind() |> colnames(wanted)
purrr::map(dsitems[,wanted], as.data.frame) |> purrr::list_cbind()
ds <- purrr::map(dsitems[,wanted], as.data.frame) |> purrr::list_cbind()
purrr::set_names(ds, wanted)
wanted
names(ds)
ds <- purrr::map(dsitems[,wanted], as.data.frame) |> purrr::list_cbind()
str(ds)
ds <- purrr::map(dsitems[,wanted], as.data.frame) |> purrr::list_cbind() |> tidyr::hoist()
purrr::map(ds, tidyr::hoist)
ds
str(ds)
map(ds, bind_rows)
purrr::map(ds, bind_rows)
purrr::map(ds, dplyr::bind_rows)
str(get(x = "gss_cat", pos = "package:forcats"))
library(forcats)
str(get(x = "gss_cat", pos = "package:forcats"))
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
dsitems[,wanted]
str(dsitems)
is.array(dsitems)
type_of(dsitems)
typeof(dsitems)
class(dsitems)
str(dsitems[,wanted])
str(ds)
str(as.data.frame(dsitems[,wanted], stringsAsFactors = FALSE))
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ds
dsitems
dsitems[,wanted]
str(as.data.frame(dsitems[,wanted], stringsAsFactors = FALSE)))
str(as.data.frame(dsitems[,wanted], stringsAsFactors = FALSE))
source("~/projects/apps/dbap/R/datasets.R", echo=TRUE)
ds
dsitems
dsitems[,wanted]
str(as.data.frame(dsitems[,wanted], stringsAsFactors = FALSE)))
str(as.data.frame(dsitems[,wanted], stringsAsFactors = FALSE))
